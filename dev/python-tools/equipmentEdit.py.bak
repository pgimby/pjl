#!/usr/bin/python3

'''This script is designed to add edit the equipment inventory. It can be used to add new equipment or to remove an existing piece of equipment'''

# Version 1.1 added image update function, manual update function

# Future Additions
# Edit values in a current entry
# Kit informatin is gathered but not entered


import pjlDB 
import os, argparse
import xml.etree.ElementTree as ET

version = "1.1"

'''Paths for xml files'''
root = "/usr/local/master/pjl-web/"
eqdbDev = root + "dev/equipmentDB.xml"
labdbDev = root + "dev/labDB.xml"
eqdbData = root + "data/equipmentDB.xml"
labdbData = root + "data/labDB.xml"
imageLocal = "staffresources/equipment/equipimg"
imageDir = root + imageLocal
manualLocal = "staffresources/equipment/equipman"
manualDir = root + manualLocal
devHost="slug"


#Fucntion that preform safety checks

'''Checks tat script is being run on the correct host'''
def testHost(host):
    thishost = os.uname()[1]
    if not host == thishost:
        print("This script is designed to be run on " + thishost + " only. Exiting...")
        exit()

'''Checks that the development version of the db is as new or newer that the live one'''
def checkTimeStamp(dev,data):
	if os.path.getmtime(data) <= os.path.getmtime(dev):
		return True
	else:
		return False


# Function used for deleting equipment

'''Functions used for deleting equipiment items'''
def deleteEquipItem(eqdb,labdb):
	valid = False
	while not valid:
		itemID = input("Please enter the id number of the equipment item you wish to remove? ")
		if len(itemID) == 4 and itemID.isdigit() == True:
			try:
				item = eqdb.getItem(idnum=itemID)
				if input("Do you want to delete - " + item.name + "? (y/N)") == "y":
					eqdb.getdeleteItem(labdb, itemID)
			except pjlDB.EQIDDoesNotExist as e:
				print(e)
			valid = True
		else:
			print("Invalid equipment id number entered. Needs to be a 4 digit number")
			return False


#Functions for adding new equipment

'''Collects input from user on the new piece of equipment'''
def getItemInfo(name,eqdb):
	infoOK = False
	while infoOK == False:
		info = {}
		print("Please enter information about new equipment")
		if input("Is this item a kit? (y/N) ") == "y":
			kitText = " of kits"
			info["is_kit"] = True
			info["name"] = input("Name of kit: ")
			lastItem = False
			kit = []
			while lastItem == False:
				lastItem = True
				kitItemName = input("Kit Item : ")
				kitItemAmount = input("How many " + kitItemName + "(s) are there? ")
				if not kitItemAmount == "1":
					kit.append(kitItemName + "(" + kitItemAmount + ")")
				else:
					kit.append(kitItemName)
				if input("Is this the last item in the kit? (Y/n) ") == "n":
					lastItem = False
			info["kit"] = kit
		else:
			kitText = ""
			info["is_kit"] = False
			info["name"] = input("Name: ")
		quantity = {}
		quantity["total"] = input("Total amount" + kitText + ": " )
		quantity["service"] = input("Amount in service: ")
		quantity["repair"]	= input("Amount under repair: ")
		info["quantity"] = quantity
		info["manufacturer"] = input("Manufacturer: ")
		info["model"] = input("Model: ")
		print("Please add some information about the storage location of this equipment")
		locations = []
		allLocations = False
		while allLocations == False:
			allLocations = True
			location = {}
			location["room"] = input("Room: ")
			location["storage"] = input("Storage Container: ")
			locations.append(location)
			if input("Is there another location (y/N) ") == "y":
				allLocations = False
		info["locations"] = locations
		print(locations)
		confirmed = checkInfo(info)
		if confirmed:
			infoOK = True
		else:
			if input("Would you like to try again. (y/N) ") == "y":
				infoOK = False
			else:
				exit()
	return info


'''Displays entered values and asks for confirmation'''
def checkInfo(info):
	print("Name: " + info["name"])
	if info["is_kit"] == "True":
		print("Kit Contents: " + info["kit"])
	print("Total amount: " + info["quantity"]["total"])
	print("Amount in service: " + info["quantity"]["service"])
	print("Amount under repair: " + info["quantity"]["repair"])
	print("Manufacturer: " + info["manufacturer"])
	print("Model: " + info["model"])
	loc = info["locations"]
	for i in range(0,len(loc)):
		print(loc[i-1])
		print(i)
	if input("Is the displayed information is correct. (y/N) ") == "y":
		return True
	else:
		return False

'''Modifies equimpnet object and adds them to new equipmentDB xml'''
def addEquip(info,eqdb):
	
	newitem = eqdb.newItem(eqdb.new_id)
	print("Adding new equipment item with ID number " + newitem.id_num)
	newitem.name = info["name"]
	newitem.quantity["total"] = info["quantity"]["total"]
	newitem.quantity["service"] = info["quantity"]["service"]
	newitem.quantity["repair"] = info["quantity"]["repair"]
	newitem.manufacturer = info["manufacturer"]
	newitem.model = info["model"]
	if not info["locations"][0]["storage"] == "" or not info["locations"][0]["room"] == "":
		newitem.locations = info["locations"]
	eqdb.addItem(newitem)




#Functions for editing equipment entries

def getItemToEdit(eqdb):
	valid = False
	while not valid:
		eqID = input("Enter the id number of the equipment item you wish to edit. ")
		print(eqID)
		if len(eqID) == 4 and eqID.isdigit() == True:
			try: 
				eqItem = eqdb.getItem(idnum=eqID)
				valid = True
				return eqItem
			except pjlDB.EQIDDoesNotExist as e:
				print(e)
				if input("Would you like to try again? (y/N)") == "y":
					valid = False
				else:
					exit()
		else:
			print(eqID + " is not a valid equipment id number. Must be a four digit number.")


def getValidAmounts(eqItem):
	validAmount = False
	while not validAmount:
		tempTotal = input("Total Amount: [" + eqItem.quantity["total"] + "] ")
		if not tempTotal == "":
			newTotal = tempTotal
		else:
			newTotal = eqItem.quantity["total"]
		tempTotal = input("Total in Service: [" + eqItem.quantity["service"] + "] ")
		if not tempTotal == "":
			newService = tempTotal
		else:
			newService = eqItem.quantity["service"]
		tempTotal = input("Total under Repair: [" + eqItem.quantity["repair"] + "] ")
		if not tempTotal == "":
			newRepair = tempTotal
		else:
			newRepair = eqItem.quantity["repair"]
		if int(newService) + int(newRepair) == int(newTotal):
			eqItem.quantity["total"] = newTotal
			eqItem.quantity["service"] = newService
			eqItem.quantity["repair"] = newRepair
			validAmount = True
		else:
			print("Totals do not add up. Please try again.")

def getLocations(item,validRooms):
	newLocations = []
	count = 0
	print(item)
	for i in item:
		print("To remove a location set the room to 'remove'")
		spot = {}
		count = count + 1
		oldRoom = i["room"]
		oldStorage = i['storage']

		newRoom = validRoom(oldRoom,validRooms)
		if newRoom:
			newStorage = validStorage(oldStorage)
			spot["room"] = newRoom
			spot["storage"] = newStorage
			newLocations.append(spot)
	return newLocations

def validRoom(oldRoom,validRooms):
	valid = False
	while not valid:
		tempRoom = input("Room: ["+ oldRoom +"] ")
		if tempRoom == "remove":
			return False
		if not tempRoom == "":
			if tempRoom in validRooms:
				print("newRoom")
				newRoom = tempRoom
				valid = True
			else:
				print(tempRoom + " is not a valid room. Please try again.")
		else:
			newRoom = oldRoom
			valid = True
	return newRoom

def validStorage(oldStorage):
	tempStorage = input("Storage: [" + oldStorage + "] ")
	if not tempStorage == ""	:
		newStorage = tempStorage
	else:
		newStorage = oldStorage
	return newStorage

def editEqInfo(eqItem,validRooms):
	
	print("Confirm/replce equipment info. To keep existing value hit enter.")
	tempName = input("Name: [" + eqItem.name + "] ")
	if not newName == "":
		eqItem.name = newName
		print(eqItem.name)
	getValidAmounts(eqItem)
	newMan = input("Manufacturer: [" + eqItem.manufacturer + "] ")
	if not newMan == "":
		eqItem.manufacturer = newMan
	newModel = input("Model: [" + eqItem.model + "] ")
	if not newModel == "":
		eqItem.model = newModel
	eqItem.locations = getLocations(eqItem.locations,validRooms)


	# print("Confirm/replce equipment info. To keep existing value hit enter.")
	# newName = input("Name: [" + eqItem.name + "] ")
	# if not newName == "":
	# 	eqItem.name = newName
	# 	print(eqItem.name)
	# getValidAmounts(eqItem)
	# newMan = input("Manufacturer: [" + eqItem.manufacturer + "] ")
	# if not newMan == "":
	# 	eqItem.manufacturer = newMan
	# newModel = input("Model: [" + eqItem.model + "] ")
	# if not newModel == "":
	# 	eqItem.model = newModel
	# eqItem.locations = getLocations(eqItem.locations,validRooms)





def checkEditInfo(info):
	print("")
	print("New Equipment Information for Confirmation")
	print("Name: " + info.name)
	print("Kit: " + str(info.is_kit))
	if info.is_kit:
		print("Kit Contents: ")
	print("Total amount: " + info.quantity["total"])
	print("Amount in service: " + info.quantity["service"])
	print("Amount under repair: " + info.quantity["repair"])
	print("Manufacturer: " + info.manufacturer)
	print("Model: " + info.model)
	print(info.locations)
	count = 0
	for i in info.locations:
		count = count + 1
		print("Location-" + str(count) + " " + i["room"] + i["storage"])
	if input("Is the new equipment information correct? (y/N) ") == "y":
		return True
	else:
		if input("Would you like to try again? (y/N) ") == "y":
			return False
		else:
			exit()

#Functions for updating equipment images

def imgInfo(imageDir):
	images =  os.listdir(imageDir)
	imageInfo = []
	ids = []
	for i in images:
		ids.append(i[:4])
		image = {}
		image["id"] = (i[:4])
		image["name"] = i
		imageInfo.append(image)
	print(ids)
	return imageInfo,ids

def outInfo(name, equipRoot):
	eqID = str(name)[:4]
	webPath = equipRoot + "/" + name
	return eqID,webPath


#Functions for updating manuals

'''Generates list of ID numbers for all equipment with a manual'''
def equipWithMan(inputDir):
	listofID = []
	for root, dirs, files in os.walk(inputDir):
		for i in files:
			equipID = str(i)[:4]
			listofID.append(equipID)
	return list(set(listofID))

'''Gathers info on each of the manuals for indiviudal pieces of equipment'''
def manInfo(ID,inputDir,equipDir):
	manInfos = []
	for root, dirs, files in os.walk(inputDir):
		for i in files:
			if ID in i:
				dictName = {}
				docPath = "/".join([equipDir, i])
				dictName["location"] = str(docPath)
				ID = str(i)[:4]
				dictName["name"] = nameGenerator(ID,manInfos)
				manInfos.append(dictName)
	return manInfos, ID

'''Determines the number of manuals available for each item'''
def numOfManuals(ID,currentList):
	num = 1
	for i in currentList:
		if ID in i["location"]:
			num = num + 1
	return num

'''Generates names for manuals based on number of manuals available for each item'''
def nameGenerator(ID,currentLst):
	manualNum = numOfManuals(ID,currentLst)
	if manualNum == 1: 
		name = ID + "-manual.pdf"
	else:
		name = ID + "-manual" + str(manualNum) + ".pdf"
	return name


### Main Script


'''Create pjlDB object of each of the relevent xml files'''
eqdb = pjlDB.EquipDB("/usr/local/master/pjl-web/dev/equipmentDB.xml")
labdb = pjlDB.LabDB("/usr/local/master/pjl-web/dev/labDB.xml")


'''Define user options'''
parser = argparse.ArgumentParser()
parser.add_argument('-d', '--delete', help='delete a piece of equipment from db', action='store_true')
parser.add_argument('-e', '--edit', help='enter id number of the piece of equipment to edit', action='store_true')
parser.add_argument('-i', '--images', help='update images of the equipment', action='store_true')
parser.add_argument('-m', '--manuals', help='update manuals of the equipment', action='store_true')
parser.add_argument('-n', '--new', help='Used this option to add a single piece of equipment. Information regarding the new piece of equimpent will be requested by the script.".', action='store_true')
parser.add_argument('-t', '--test', help='debug mode', action='store_true')
parser.add_argument('-v', '--version', help='Print current verion of script', action='store_true')
args = parser.parse_args()

validRooms = ["ST009","ST017","ST029","ST030","ST032","ST034","ST036","ST037","ST038","ST039","ST042","ST046","ST048","ST050","ES002","remove"]


'''Confirm that this script won't accidently run on the wrong machine'''
testHost(devHost)

'''prints version'''
if args.version:
	print("Version " + version)
	exit()

'''Checks that the development version of both key DBs are new or as new as the live versions.'''
if not checkTimeStamp(eqdbDev,eqdbData) or not checkTimeStamp(labdbDev,labdbData):
	if not checkTimeStamp(eqdbDev,eqdbData):
		print("Equipment development database is out of synce with the live version. Please update the development version before continuing.")
	if not checkTimeStamp(labdbDev,labdbData):
		print("Repository development database is out of synce with the live version. Please update the development version before continuing.")
	print("Exiting...")
	exit()

'''calls functions for deleting equipment item'''
if args.delete:
	deleteEquipItem(eqdb,labdb)


'''calls function for adding new equipment item'''
if args.new:
	equipInfo = getItemInfo(args.new,eqdb)
	addEquip(equipInfo,eqdb)


'''calls functions for editing an existing equipment entry'''
if args.edit:
	valid = False
	while not valid:
		itemToEdit = getItemToEdit(eqdb)
		getItemInfo
		#editEqInfo(itemToEdit,validRooms)
		valid = checkEditInfo(itemToEdit)

'''calls functions for updateing images for equipment'''
if args.images:
	images,ids = imgInfo(imageDir)
	tree = eqdb.tree
	eqTreeRoot = tree.getroot()
	for item in eqTreeRoot:
		itemID = item.attrib["id"]
		equip = eqdb.getItem(idnum=itemID)
		if itemID in ids:
			for i in images:
				if i["id"] == itemID:
					name = i["name"]
			equip.thumbnail = "/" + imageLocal + "/" + name
			print(equip.thumbnail)
		else:
			equip.thumbnail = "/img/img-placeholder.png"
			print(equip.thumbnail)
		eqdb.addItem(equip)

if args.manuals:
	print("adding manuals")
	listOfIDs = equipWithMan(manualDir)
	print(listOfIDs)
	for i in listOfIDs:
		equipManuals,eqID = manInfo(i,manualDir,"/" + manualLocal)
		equip = eqdb.getItem(idnum=eqID)
		equip.documents = equipManuals
		print(equip.documents)
		#eqdb.addItem(equip)
# db.save("../updatedequipmentDB.xml", ignore_validation=False, error_log=True)


'''saves new xml file'''
eqdb.save("/usr/local/master/pjl-web/dev/tmp.xml", ignore_validation=False, error_log=True)
#eqdb.save("/usr/local/master/pjl-web/dev/equipmentDB.xml", ignore_validation=False, error_log=True)

'''confirms that the script has ended properly'''
print("...and then there will be cake")