#!/usr/bin/python3

import fnmatch
import os
import re

#root_path = '/home/pgimby/temp/'
root_path = "/usr/local/master/labs/repository"
#lab_repository = root_path + "repository/"
#os.system("ls " + lab_repository)
output = root_path + "tikz.tex"
#output = '../../staffresources/templates/tikz.tex'
pattern = "*FULL*"
pattern2 = "*.tex"
doc_preamble = ['\\input{standard-preamble.tex}\n', '\\begin{document}\n', '\\title{Sample Tikz Diagrams}\n', '\\listoffigures', '\\newpage' ]
doc_end = ['\\end{document}\n']


def addTextList(text_list, o):

	'''writes preamble for latex file into '''
	for i in text_list:
		o.write(str(i) + "\n")


def listOfLabs(root_path):

	'''generate list of lab folders'''
	print(root_path)
	listOfLabs = []
	for item in os.listdir(root_path):
		print(item)
		if os.path.isdir(item):
			#print(item)
			listOfLabs.append(item)
	print(listOfLabs)
	return listOfLabs


def listOfDocs(doc_path):			

	'''creates a list of tex files with the nae *FULL* '''

	listOfTex = []
	for root, dirs, files in os.walk(doc_path):
		for filename in fnmatch.filter(files,pattern):
			if fnmatch.fnmatch(filename, "*.tex"):
				listOfTex.append( os.path.join(root,filename))
	return listOfTex


def sectionTitle(path, o):

	'''insert new section header'''
	with open(path, "r") as f:
		s = f.read()
		title = re.search(r"\\chapter{([.\s\S]*?)}", s)
		title = str(title.group(0)).replace("chapter", "section")
		title = title + '\n'
		o.write(title)
		o.write('\n')


def getTikz(path, typ, diagrams):

	'''collect tizk pictures and add to doc'''
	with open(path, "r") as f:
		s = f.read()
		#m = re.findall(r"(\\begin{"+typ+"}[.\s\S]*?\\end{"+typ+"})", s)
		m = re.findall(r"\\begin{"+typ+"}[.\s\S]*?\n([.\s\S]*?)\\end{"+typ+"}", s)
		for tikzcode in m:
			if "tikzpicture" in tikzcode:
				if checkForEmpty(tikzcode) == "False":
					tikzcode = removeUnwanted(tikzcode)
					diagrams.append(tikzcode)
			#		print(tikzcode)
				#tikzcode = fixErrors(tikzcode)
		#		print(type(tikzcode))
		#		
		#return diagrams
				#o.write(tikzcode + "\n\n\n")


def checkForEmpty(lst):

	'''check if a string is empty'''
	if len(lst) != 0:
		empty = "False"
		return empty
	else:
		empty = "True"
		return empty


def removeUnwanted(tikzcode):

	'''used to make all figures the same type'''
	#tikzcode = tikzcode.replace("{marginfigure}", "{figure}")
	#tikzcode = tikzcode.replace("{mainfigure}", "{figure}")
	tikzcode = re.sub(r"\center([.\s\S]*?)\n", "", tikzcode)
	#tikzcode = re.sub(r"end{figure}", "end{mainfigure}", tikzcode)
	return tikzcode


def compileLatex(o):

	'''compile the output .tex file'''
	os.system("pdflatex " + o)


with open(output, "w") as o:
	addTextList(doc_preamble, o)
	for lab in listOfLabs(root_path):
		print(lab)
		docs = listOfDocs(lab)
		sectionTitle(docs[0],o)
		listofdiagrams = []
		for version in docs:
			#diagrams = []
			getTikz(version, "figure", listofdiagrams)
			getTikz(version, "marginfigure", listofdiagrams)
			getTikz(version, "mainfigure", listofdiagrams)
		listofdiagrams = set(listofdiagrams)
		listofdiagrams = list(listofdiagrams)
		for figure in listofdiagrams:
			o.write("\\begin{mainfigure}\n")
			o.write(figure)
			o.write("end{mainfigure}\n\n")
		o.write("\\newpage\n")
	addTextList(doc_end, o)

#os.system("ls " + root_path)

#compileLatex(output)
#compileLatex(output)



''' Old functions '''




	
			#for k in docs[j]:
			#	print(k)

			#return
		#for i in listofdiagrams:
		#	print(listofdiagrams[i][0])

			#set(listofdiagrams)
			#print(type(listofdiagrams))
			#listofdiagrams=list(set(listofdiagrams))
			#print(type(listofdiagrams))
		#o.write(listofdiagrams)
		
				#sectionTitle(i,o)
		#print(title)
		#print(lst)
#with open(output, 'w') as o:

#	for i in listOfDocs(root_path):
#		
#		getTikz(i, "figure", o)
#		getTikz(i, "marginfigure", o)
#		getTikz(i, "mainfigure", o)
#	addTextList(doc_end, o)
#compileLatex(output)

